// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package mongodb

import (
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
)

const opAddSecondaryInstance = "AddSecondaryInstance"

// AddSecondaryInstanceRequest generates a "ksc/request.Request" representing the
// client's request for the AddSecondaryInstance operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See AddSecondaryInstance for more information on using the AddSecondaryInstance
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the AddSecondaryInstanceRequest method.
//    req, resp := client.AddSecondaryInstanceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/mongodb-2017-01-01/AddSecondaryInstance
func (c *Mongodb) AddSecondaryInstanceRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opAddSecondaryInstance,
		HTTPMethod: "PUT",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// AddSecondaryInstance API operation for mongodb.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for mongodb's
// API operation AddSecondaryInstance for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/mongodb-2017-01-01/AddSecondaryInstance
func (c *Mongodb) AddSecondaryInstance(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.AddSecondaryInstanceRequest(input)
	return out, req.Send()
}

// AddSecondaryInstanceWithContext is the same as AddSecondaryInstance with the addition of
// the ability to pass a context and additional request options.
//
// See AddSecondaryInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Mongodb) AddSecondaryInstanceWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.AddSecondaryInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opAddSecurityGroupRule = "AddSecurityGroupRule"

// AddSecurityGroupRuleRequest generates a "ksc/request.Request" representing the
// client's request for the AddSecurityGroupRule operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See AddSecurityGroupRule for more information on using the AddSecurityGroupRule
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the AddSecurityGroupRuleRequest method.
//    req, resp := client.AddSecurityGroupRuleRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/mongodb-2017-01-01/AddSecurityGroupRule
func (c *Mongodb) AddSecurityGroupRuleRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opAddSecurityGroupRule,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// AddSecurityGroupRule API operation for mongodb.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for mongodb's
// API operation AddSecurityGroupRule for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/mongodb-2017-01-01/AddSecurityGroupRule
func (c *Mongodb) AddSecurityGroupRule(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.AddSecurityGroupRuleRequest(input)
	return out, req.Send()
}

// AddSecurityGroupRuleWithContext is the same as AddSecurityGroupRule with the addition of
// the ability to pass a context and additional request options.
//
// See AddSecurityGroupRule for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Mongodb) AddSecurityGroupRuleWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.AddSecurityGroupRuleRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateMongoDBInstance = "CreateMongoDBInstance"

// CreateMongoDBInstanceRequest generates a "ksc/request.Request" representing the
// client's request for the CreateMongoDBInstance operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See CreateMongoDBInstance for more information on using the CreateMongoDBInstance
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the CreateMongoDBInstanceRequest method.
//    req, resp := client.CreateMongoDBInstanceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/mongodb-2017-01-01/CreateMongoDBInstance
func (c *Mongodb) CreateMongoDBInstanceRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateMongoDBInstance,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateMongoDBInstance API operation for mongodb.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for mongodb's
// API operation CreateMongoDBInstance for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/mongodb-2017-01-01/CreateMongoDBInstance
func (c *Mongodb) CreateMongoDBInstance(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateMongoDBInstanceRequest(input)
	return out, req.Send()
}

// CreateMongoDBInstanceWithContext is the same as CreateMongoDBInstance with the addition of
// the ability to pass a context and additional request options.
//
// See CreateMongoDBInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Mongodb) CreateMongoDBInstanceWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateMongoDBInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateMongoDBShardInstance = "CreateMongoDBShardInstance"

// CreateMongoDBShardInstanceRequest generates a "ksc/request.Request" representing the
// client's request for the CreateMongoDBShardInstance operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See CreateMongoDBShardInstance for more information on using the CreateMongoDBShardInstance
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the CreateMongoDBShardInstanceRequest method.
//    req, resp := client.CreateMongoDBShardInstanceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/mongodb-2017-01-01/CreateMongoDBShardInstance
func (c *Mongodb) CreateMongoDBShardInstanceRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateMongoDBShardInstance,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateMongoDBShardInstance API operation for mongodb.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for mongodb's
// API operation CreateMongoDBShardInstance for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/mongodb-2017-01-01/CreateMongoDBShardInstance
func (c *Mongodb) CreateMongoDBShardInstance(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateMongoDBShardInstanceRequest(input)
	return out, req.Send()
}

// CreateMongoDBShardInstanceWithContext is the same as CreateMongoDBShardInstance with the addition of
// the ability to pass a context and additional request options.
//
// See CreateMongoDBShardInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Mongodb) CreateMongoDBShardInstanceWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateMongoDBShardInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateMongoDBSnapshot = "CreateMongoDBSnapshot"

// CreateMongoDBSnapshotRequest generates a "ksc/request.Request" representing the
// client's request for the CreateMongoDBSnapshot operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See CreateMongoDBSnapshot for more information on using the CreateMongoDBSnapshot
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the CreateMongoDBSnapshotRequest method.
//    req, resp := client.CreateMongoDBSnapshotRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/mongodb-2017-01-01/CreateMongoDBSnapshot
func (c *Mongodb) CreateMongoDBSnapshotRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateMongoDBSnapshot,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateMongoDBSnapshot API operation for mongodb.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for mongodb's
// API operation CreateMongoDBSnapshot for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/mongodb-2017-01-01/CreateMongoDBSnapshot
func (c *Mongodb) CreateMongoDBSnapshot(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateMongoDBSnapshotRequest(input)
	return out, req.Send()
}

// CreateMongoDBSnapshotWithContext is the same as CreateMongoDBSnapshot with the addition of
// the ability to pass a context and additional request options.
//
// See CreateMongoDBSnapshot for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Mongodb) CreateMongoDBSnapshotWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateMongoDBSnapshotRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteMongoDBInstance = "DeleteMongoDBInstance"

// DeleteMongoDBInstanceRequest generates a "ksc/request.Request" representing the
// client's request for the DeleteMongoDBInstance operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DeleteMongoDBInstance for more information on using the DeleteMongoDBInstance
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DeleteMongoDBInstanceRequest method.
//    req, resp := client.DeleteMongoDBInstanceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/mongodb-2017-01-01/DeleteMongoDBInstance
func (c *Mongodb) DeleteMongoDBInstanceRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteMongoDBInstance,
		HTTPMethod: "DELETE",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteMongoDBInstance API operation for mongodb.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for mongodb's
// API operation DeleteMongoDBInstance for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/mongodb-2017-01-01/DeleteMongoDBInstance
func (c *Mongodb) DeleteMongoDBInstance(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteMongoDBInstanceRequest(input)
	return out, req.Send()
}

// DeleteMongoDBInstanceWithContext is the same as DeleteMongoDBInstance with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteMongoDBInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Mongodb) DeleteMongoDBInstanceWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteMongoDBInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteMongoDBSnapshot = "DeleteMongoDBSnapshot"

// DeleteMongoDBSnapshotRequest generates a "ksc/request.Request" representing the
// client's request for the DeleteMongoDBSnapshot operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DeleteMongoDBSnapshot for more information on using the DeleteMongoDBSnapshot
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DeleteMongoDBSnapshotRequest method.
//    req, resp := client.DeleteMongoDBSnapshotRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/mongodb-2017-01-01/DeleteMongoDBSnapshot
func (c *Mongodb) DeleteMongoDBSnapshotRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteMongoDBSnapshot,
		HTTPMethod: "DELETE",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteMongoDBSnapshot API operation for mongodb.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for mongodb's
// API operation DeleteMongoDBSnapshot for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/mongodb-2017-01-01/DeleteMongoDBSnapshot
func (c *Mongodb) DeleteMongoDBSnapshot(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteMongoDBSnapshotRequest(input)
	return out, req.Send()
}

// DeleteMongoDBSnapshotWithContext is the same as DeleteMongoDBSnapshot with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteMongoDBSnapshot for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Mongodb) DeleteMongoDBSnapshotWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteMongoDBSnapshotRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteSecurityGroupRules = "DeleteSecurityGroupRules"

// DeleteSecurityGroupRulesRequest generates a "ksc/request.Request" representing the
// client's request for the DeleteSecurityGroupRules operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DeleteSecurityGroupRules for more information on using the DeleteSecurityGroupRules
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DeleteSecurityGroupRulesRequest method.
//    req, resp := client.DeleteSecurityGroupRulesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/mongodb-2017-01-01/DeleteSecurityGroupRules
func (c *Mongodb) DeleteSecurityGroupRulesRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteSecurityGroupRules,
		HTTPMethod: "DELETE",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteSecurityGroupRules API operation for mongodb.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for mongodb's
// API operation DeleteSecurityGroupRules for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/mongodb-2017-01-01/DeleteSecurityGroupRules
func (c *Mongodb) DeleteSecurityGroupRules(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteSecurityGroupRulesRequest(input)
	return out, req.Send()
}

// DeleteSecurityGroupRulesWithContext is the same as DeleteSecurityGroupRules with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteSecurityGroupRules for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Mongodb) DeleteSecurityGroupRulesWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteSecurityGroupRulesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeMongoDBInstance = "DescribeMongoDBInstance"

// DescribeMongoDBInstanceRequest generates a "ksc/request.Request" representing the
// client's request for the DescribeMongoDBInstance operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeMongoDBInstance for more information on using the DescribeMongoDBInstance
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeMongoDBInstanceRequest method.
//    req, resp := client.DescribeMongoDBInstanceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/mongodb-2017-01-01/DescribeMongoDBInstance
func (c *Mongodb) DescribeMongoDBInstanceRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeMongoDBInstance,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeMongoDBInstance API operation for mongodb.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for mongodb's
// API operation DescribeMongoDBInstance for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/mongodb-2017-01-01/DescribeMongoDBInstance
func (c *Mongodb) DescribeMongoDBInstance(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeMongoDBInstanceRequest(input)
	return out, req.Send()
}

// DescribeMongoDBInstanceWithContext is the same as DescribeMongoDBInstance with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeMongoDBInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Mongodb) DescribeMongoDBInstanceWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeMongoDBInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeMongoDBInstanceNode = "DescribeMongoDBInstanceNode"

// DescribeMongoDBInstanceNodeRequest generates a "ksc/request.Request" representing the
// client's request for the DescribeMongoDBInstanceNode operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeMongoDBInstanceNode for more information on using the DescribeMongoDBInstanceNode
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeMongoDBInstanceNodeRequest method.
//    req, resp := client.DescribeMongoDBInstanceNodeRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/mongodb-2017-01-01/DescribeMongoDBInstanceNode
func (c *Mongodb) DescribeMongoDBInstanceNodeRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeMongoDBInstanceNode,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeMongoDBInstanceNode API operation for mongodb.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for mongodb's
// API operation DescribeMongoDBInstanceNode for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/mongodb-2017-01-01/DescribeMongoDBInstanceNode
func (c *Mongodb) DescribeMongoDBInstanceNode(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeMongoDBInstanceNodeRequest(input)
	return out, req.Send()
}

// DescribeMongoDBInstanceNodeWithContext is the same as DescribeMongoDBInstanceNode with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeMongoDBInstanceNode for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Mongodb) DescribeMongoDBInstanceNodeWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeMongoDBInstanceNodeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeMongoDBInstances = "DescribeMongoDBInstances"

// DescribeMongoDBInstancesRequest generates a "ksc/request.Request" representing the
// client's request for the DescribeMongoDBInstances operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeMongoDBInstances for more information on using the DescribeMongoDBInstances
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeMongoDBInstancesRequest method.
//    req, resp := client.DescribeMongoDBInstancesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/mongodb-2017-01-01/DescribeMongoDBInstances
func (c *Mongodb) DescribeMongoDBInstancesRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeMongoDBInstances,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeMongoDBInstances API operation for mongodb.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for mongodb's
// API operation DescribeMongoDBInstances for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/mongodb-2017-01-01/DescribeMongoDBInstances
func (c *Mongodb) DescribeMongoDBInstances(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeMongoDBInstancesRequest(input)
	return out, req.Send()
}

// DescribeMongoDBInstancesWithContext is the same as DescribeMongoDBInstances with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeMongoDBInstances for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Mongodb) DescribeMongoDBInstancesWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeMongoDBInstancesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeMongoDBShardNode = "DescribeMongoDBShardNode"

// DescribeMongoDBShardNodeRequest generates a "ksc/request.Request" representing the
// client's request for the DescribeMongoDBShardNode operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeMongoDBShardNode for more information on using the DescribeMongoDBShardNode
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeMongoDBShardNodeRequest method.
//    req, resp := client.DescribeMongoDBShardNodeRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/mongodb-2017-01-01/DescribeMongoDBShardNode
func (c *Mongodb) DescribeMongoDBShardNodeRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeMongoDBShardNode,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeMongoDBShardNode API operation for mongodb.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for mongodb's
// API operation DescribeMongoDBShardNode for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/mongodb-2017-01-01/DescribeMongoDBShardNode
func (c *Mongodb) DescribeMongoDBShardNode(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeMongoDBShardNodeRequest(input)
	return out, req.Send()
}

// DescribeMongoDBShardNodeWithContext is the same as DescribeMongoDBShardNode with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeMongoDBShardNode for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Mongodb) DescribeMongoDBShardNodeWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeMongoDBShardNodeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeMongoDBSnapshot = "DescribeMongoDBSnapshot"

// DescribeMongoDBSnapshotRequest generates a "ksc/request.Request" representing the
// client's request for the DescribeMongoDBSnapshot operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeMongoDBSnapshot for more information on using the DescribeMongoDBSnapshot
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeMongoDBSnapshotRequest method.
//    req, resp := client.DescribeMongoDBSnapshotRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/mongodb-2017-01-01/DescribeMongoDBSnapshot
func (c *Mongodb) DescribeMongoDBSnapshotRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeMongoDBSnapshot,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeMongoDBSnapshot API operation for mongodb.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for mongodb's
// API operation DescribeMongoDBSnapshot for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/mongodb-2017-01-01/DescribeMongoDBSnapshot
func (c *Mongodb) DescribeMongoDBSnapshot(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeMongoDBSnapshotRequest(input)
	return out, req.Send()
}

// DescribeMongoDBSnapshotWithContext is the same as DescribeMongoDBSnapshot with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeMongoDBSnapshot for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Mongodb) DescribeMongoDBSnapshotWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeMongoDBSnapshotRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeRegions = "DescribeRegions"

// DescribeRegionsRequest generates a "ksc/request.Request" representing the
// client's request for the DescribeRegions operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeRegions for more information on using the DescribeRegions
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeRegionsRequest method.
//    req, resp := client.DescribeRegionsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/mongodb-2017-01-01/DescribeRegions
func (c *Mongodb) DescribeRegionsRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeRegions,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeRegions API operation for mongodb.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for mongodb's
// API operation DescribeRegions for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/mongodb-2017-01-01/DescribeRegions
func (c *Mongodb) DescribeRegions(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeRegionsRequest(input)
	return out, req.Send()
}

// DescribeRegionsWithContext is the same as DescribeRegions with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeRegions for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Mongodb) DescribeRegionsWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeRegionsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListSecurityGroupRules = "ListSecurityGroupRules"

// ListSecurityGroupRulesRequest generates a "ksc/request.Request" representing the
// client's request for the ListSecurityGroupRules operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ListSecurityGroupRules for more information on using the ListSecurityGroupRules
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the ListSecurityGroupRulesRequest method.
//    req, resp := client.ListSecurityGroupRulesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/mongodb-2017-01-01/ListSecurityGroupRules
func (c *Mongodb) ListSecurityGroupRulesRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListSecurityGroupRules,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ListSecurityGroupRules API operation for mongodb.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for mongodb's
// API operation ListSecurityGroupRules for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/mongodb-2017-01-01/ListSecurityGroupRules
func (c *Mongodb) ListSecurityGroupRules(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListSecurityGroupRulesRequest(input)
	return out, req.Send()
}

// ListSecurityGroupRulesWithContext is the same as ListSecurityGroupRules with the addition of
// the ability to pass a context and additional request options.
//
// See ListSecurityGroupRules for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Mongodb) ListSecurityGroupRulesWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListSecurityGroupRulesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRenameMongoDBInstance = "RenameMongoDBInstance"

// RenameMongoDBInstanceRequest generates a "ksc/request.Request" representing the
// client's request for the RenameMongoDBInstance operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See RenameMongoDBInstance for more information on using the RenameMongoDBInstance
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the RenameMongoDBInstanceRequest method.
//    req, resp := client.RenameMongoDBInstanceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/mongodb-2017-01-01/RenameMongoDBInstance
func (c *Mongodb) RenameMongoDBInstanceRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opRenameMongoDBInstance,
		HTTPMethod: "PUT",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// RenameMongoDBInstance API operation for mongodb.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for mongodb's
// API operation RenameMongoDBInstance for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/mongodb-2017-01-01/RenameMongoDBInstance
func (c *Mongodb) RenameMongoDBInstance(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.RenameMongoDBInstanceRequest(input)
	return out, req.Send()
}

// RenameMongoDBInstanceWithContext is the same as RenameMongoDBInstance with the addition of
// the ability to pass a context and additional request options.
//
// See RenameMongoDBInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Mongodb) RenameMongoDBInstanceWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.RenameMongoDBInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRenameMongoDBSnapshot = "RenameMongoDBSnapshot"

// RenameMongoDBSnapshotRequest generates a "ksc/request.Request" representing the
// client's request for the RenameMongoDBSnapshot operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See RenameMongoDBSnapshot for more information on using the RenameMongoDBSnapshot
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the RenameMongoDBSnapshotRequest method.
//    req, resp := client.RenameMongoDBSnapshotRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/mongodb-2017-01-01/RenameMongoDBSnapshot
func (c *Mongodb) RenameMongoDBSnapshotRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opRenameMongoDBSnapshot,
		HTTPMethod: "PUT",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// RenameMongoDBSnapshot API operation for mongodb.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for mongodb's
// API operation RenameMongoDBSnapshot for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/mongodb-2017-01-01/RenameMongoDBSnapshot
func (c *Mongodb) RenameMongoDBSnapshot(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.RenameMongoDBSnapshotRequest(input)
	return out, req.Send()
}

// RenameMongoDBSnapshotWithContext is the same as RenameMongoDBSnapshot with the addition of
// the ability to pass a context and additional request options.
//
// See RenameMongoDBSnapshot for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Mongodb) RenameMongoDBSnapshotWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.RenameMongoDBSnapshotRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRestartMongoDBInstance = "RestartMongoDBInstance"

// RestartMongoDBInstanceRequest generates a "ksc/request.Request" representing the
// client's request for the RestartMongoDBInstance operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See RestartMongoDBInstance for more information on using the RestartMongoDBInstance
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the RestartMongoDBInstanceRequest method.
//    req, resp := client.RestartMongoDBInstanceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/mongodb-2017-01-01/RestartMongoDBInstance
func (c *Mongodb) RestartMongoDBInstanceRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opRestartMongoDBInstance,
		HTTPMethod: "PUT",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// RestartMongoDBInstance API operation for mongodb.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for mongodb's
// API operation RestartMongoDBInstance for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/mongodb-2017-01-01/RestartMongoDBInstance
func (c *Mongodb) RestartMongoDBInstance(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.RestartMongoDBInstanceRequest(input)
	return out, req.Send()
}

// RestartMongoDBInstanceWithContext is the same as RestartMongoDBInstance with the addition of
// the ability to pass a context and additional request options.
//
// See RestartMongoDBInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Mongodb) RestartMongoDBInstanceWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.RestartMongoDBInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opSetMongoDBTimingSnapshot = "SetMongoDBTimingSnapshot"

// SetMongoDBTimingSnapshotRequest generates a "ksc/request.Request" representing the
// client's request for the SetMongoDBTimingSnapshot operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See SetMongoDBTimingSnapshot for more information on using the SetMongoDBTimingSnapshot
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the SetMongoDBTimingSnapshotRequest method.
//    req, resp := client.SetMongoDBTimingSnapshotRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/mongodb-2017-01-01/SetMongoDBTimingSnapshot
func (c *Mongodb) SetMongoDBTimingSnapshotRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opSetMongoDBTimingSnapshot,
		HTTPMethod: "PUT",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// SetMongoDBTimingSnapshot API operation for mongodb.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for mongodb's
// API operation SetMongoDBTimingSnapshot for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/mongodb-2017-01-01/SetMongoDBTimingSnapshot
func (c *Mongodb) SetMongoDBTimingSnapshot(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.SetMongoDBTimingSnapshotRequest(input)
	return out, req.Send()
}

// SetMongoDBTimingSnapshotWithContext is the same as SetMongoDBTimingSnapshot with the addition of
// the ability to pass a context and additional request options.
//
// See SetMongoDBTimingSnapshot for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Mongodb) SetMongoDBTimingSnapshotWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.SetMongoDBTimingSnapshotRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}
